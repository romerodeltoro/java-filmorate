DROP TABLE IF EXISTS genres, users, mpa, films, film_genre, film_likes, friends;

CREATE table if not exists users (
  user_id long NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email varchar(50) not NULL,
  login varchar(50) not NULL,
  name varchar(50),
  birthday date not NULL
);

CREATE TABLE if not exists mpa (
  mpa_id long NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  mpa_name varchar(5)
);

CREATE table if not exists films (
  film_id long NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar(100) not NULL,
  description varchar(200) not NULL,
  releaseDate date not NULL,
  duration int not NULL,
  mpa_id long,
  CONSTRAINT films_mpa_id_fkey FOREIGN KEY (mpa_id) REFERENCES mpa(mpa_id)
);

CREATE TABLE if not exists genres (
  genre_id long NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  genre_name varchar(50)
);

CREATE TABLE if not exists film_genre (
  film_id long not NULL,
  genre_id long not null,
  CONSTRAINT film_genre_film_id_fkey FOREIGN KEY (film_id) REFERENCES films(film_id) on delete cascade,
  CONSTRAINT film_genre_genre_id_fkey FOREIGN KEY (genre_id) REFERENCES genres(genre_id) on delete cascade
);

create TABLE if not exists film_likes (
  film_id long not NULL,
  user_id long not null,
  CONSTRAINT film_likes_fk FOREIGN KEY (film_id) REFERENCES films(film_id) on delete cascade,
  CONSTRAINT film_likes_user_fk FOREIGN KEY (user_id) REFERENCES users(user_id) on delete cascade
);

CREATE TABLE if not exists friends (
  user_id long not null,
  friend_id long not NULL,
  friendship bool not null DEFAULT false,
  CONSTRAINT users_friends_fk FOREIGN KEY (user_id) REFERENCES users(user_id)
);

